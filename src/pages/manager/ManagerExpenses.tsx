import { useState } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { PlusCircle, DollarSign, ArrowLeft, Filter, FileDown } from "lucide-react";
import rentoLogo from "@/assets/rento-logo-dark.svg";
import { jsPDF } from "jspdf";

const ManagerExpenses = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const property = location.state?.property || "Selected Property";

  // === Sample Data ===
  const [expenses, setExpenses] = useState([
    { id: 1, type: "Maintenance", details: "Fixed leaking pipe in Unit 2A", cost: "150000" },
    { id: 2, type: "Utilities", details: "Water and electricity bill", cost: "350000" },
    { id: 3, type: "Repairs", details: "Repaired broken gate", cost: "250000" },
    { id: 4, type: "Maintenance", details: "Garden cleaning and hedge trimming", cost: "120000" },
  ]);

  const [newExpense, setNewExpense] = useState({ type: "", details: "", cost: "" });
  const [filter, setFilter] = useState("All");

  // === Handle Changes ===
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setNewExpense((prev) => ({ ...prev, [name]: value }));
  };

  // === Add Expense ===
  const handleAddExpense = () => {
    if (!newExpense.type || !newExpense.details || !newExpense.cost) {
      alert("Please fill in all fields before adding an expense.");
      return;
    }
    const expense = {
      id: expenses.length + 1,
      ...newExpense,
    };
    setExpenses((prev) => [...prev, expense]);
    setNewExpense({ type: "", details: "", cost: "" });
  };

  // === Filter Expenses ===
  const filteredExpenses =
    filter === "All" ? expenses : expenses.filter((e) => e.type === filter);

  // === Total Calculation ===
  const totalCost = filteredExpenses.reduce((acc, curr) => acc + parseInt(curr.cost || "0"), 0);

  // === Export PDF ===
  const handleExportPDF = async () => {
    const doc = new jsPDF({ unit: "pt", format: "a4" });
    const pageWidth = doc.internal.pageSize.getWidth();
    const primary = "#08967e";

    const logo = await fetch(rentoLogo)
      .then((res) => res.blob())
      .then((blob) => URL.createObjectURL(blob));

    doc.addImage(logo, "PNG", 40, 30, 50, 50);
    doc.setFont("helvetica", "bold");
    doc.setFontSize(18);
    doc.setTextColor(primary);
    doc.text("Rento Property Expense Report", 110, 60);
    doc.setFontSize(12);
    doc.setTextColor("#000");
    doc.text(`Property: ${property}`, 40, 100);
    doc.text(`Category Filter: ${filter}`, 40, 115);

    // Table header
    let y = 150;
    doc.setFont("helvetica", "bold");
    doc.setFillColor(primary);
    doc.setTextColor("#ffffff");
    doc.rect(40, y - 10, pageWidth - 80, 25, "F");
    doc.text("Type", 60, y + 5);
    doc.text("Details", 200, y + 5);
    doc.text("Cost (UGX)", pageWidth - 140, y + 5, { align: "right" });

    // Table rows
    doc.setFont("helvetica", "normal");
    doc.setTextColor("#000");
    y += 30;
    filteredExpenses.forEach((e) => {
      doc.text(e.type, 60, y);
      doc.text(e.details, 200, y, { maxWidth: pageWidth - 300 });
      doc.text(e.cost, pageWidth - 140, y, { align: "right" });
      y += 20;
    });

    // Total
    doc.setFont("helvetica", "bold");
    doc.text(`Total: UGX ${totalCost.toLocaleString()}`, pageWidth - 80, y + 30, { align: "right" });

    // Footer
    doc.setFontSize(10);
    doc.setTextColor("#777");
    doc.text(
      "Generated by Rento â€¢ Revolutionizing the Rental Experience",
      pageWidth / 2,
      820,
      { align: "center" }
    );

    doc.save("Rento_Property_Expenses.pdf");
  };

  return (
    <div className="min-h-screen bg-background relative pb-20">
      {/* Header */}
      <header className="border-b bg-card">
        <div className="container mx-auto flex items-center justify-between px-4 py-4">
          <div className="flex items-center gap-2">
            <img src={rentoLogo} alt="Rento" className="h-8 w-auto" />
            <h1 className="font-heading text-xl font-semibold text-foreground">
              Property Expenses
            </h1>
          </div>
          <p className="text-sm text-muted-foreground">{property}</p>
        </div>
      </header>

      {/* Main Content */}
      <main className="container mx-auto px-4 py-10 max-w-3xl space-y-10">
        {/* Filter + Export */}
        <div className="flex flex-wrap items-center justify-between gap-4">
          <div className="flex items-center gap-2">
            <Filter className="h-5 w-5 text-primary" />
            <Select value={filter} onValueChange={(v) => setFilter(v)}>
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Filter by category" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="All">All</SelectItem>
                <SelectItem value="Maintenance">Maintenance</SelectItem>
                <SelectItem value="Repairs">Repairs</SelectItem>
                <SelectItem value="Utilities">Utilities</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <Button
            onClick={handleExportPDF}
            variant="outline"
            className="flex items-center gap-2 border-primary text-primary hover:bg-primary/10"
          >
            <FileDown className="h-4 w-4" />
            Export PDF
          </Button>
        </div>

        {/* Expenses Summary */}
        <section>
          <h2 className="font-heading text-lg font-semibold text-foreground mb-4 flex items-center gap-2">
            <DollarSign className="h-5 w-5 text-primary" />
            Recorded Expenses
          </h2>

          {filteredExpenses.length > 0 ? (
            <div className="space-y-4">
              {filteredExpenses.map((expense) => (
                <Card
                  key={expense.id}
                  className="p-4 border-border hover:border-primary/60 transition-all"
                >
                  <div className="flex justify-between items-start">
                    <div>
                      <h3 className="font-medium text-foreground">{expense.type}</h3>
                      <p className="text-sm text-muted-foreground mt-1">{expense.details}</p>
                    </div>
                    <p className="font-semibold text-primary">UGX {expense.cost}</p>
                  </div>
                </Card>
              ))}
            </div>
          ) : (
            <p className="text-muted-foreground text-sm text-center">No expenses found.</p>
          )}

          {/* Total Summary */}
          <div className="mt-6 flex justify-between items-center border-t border-border pt-4">
            <span className="font-medium text-foreground">Total ({filter}):</span>
            <span className="font-bold text-primary">UGX {totalCost.toLocaleString()}</span>
          </div>
        </section>

        {/* Add Expense Form */}
        <section>
          <h2 className="font-heading text-lg font-semibold text-foreground mb-4 flex items-center gap-2">
            <PlusCircle className="h-5 w-5 text-primary" />
            Add New Expense
          </h2>

          <Card className="p-6 border-border shadow-sm space-y-5">
            <div>
              <label className="text-sm font-medium text-foreground mb-1 block">
                Type of Expense
              </label>
              <Input
                name="type"
                placeholder="e.g., Maintenance, Utilities, Repairs"
                value={newExpense.type}
                onChange={handleChange}
              />
            </div>

            <div>
              <label className="text-sm font-medium text-foreground mb-1 block">
                Details
              </label>
              <Textarea
                name="details"
                rows={3}
                placeholder="Short description of the expense"
                value={newExpense.details}
                onChange={handleChange}
              />
            </div>

            <div>
              <label className="text-sm font-medium text-foreground mb-1 block">
                Cost (UGX)
              </label>
              <Input
                name="cost"
                type="number"
                placeholder="e.g., 500000"
                value={newExpense.cost}
                onChange={handleChange}
              />
            </div>

            <Button
              onClick={handleAddExpense}
              className="w-full h-12 bg-primary text-primary-foreground hover:bg-primary/90"
            >
              Add Expense
            </Button>
          </Card>
        </section>
      </main>

      {/* Back Button */}
      <Button
        variant="ghost"
        size="icon"
        onClick={() => navigate(-1)}
        className="fixed bottom-6 left-6 rounded-full bg-card border border-border shadow-sm hover:bg-muted"
      >
        <ArrowLeft className="h-5 w-5 text-primary" />
      </Button>
    </div>
  );
};

export default ManagerExpenses;


